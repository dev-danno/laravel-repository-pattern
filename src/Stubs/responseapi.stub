<?php

namespace App\Classes;

use Illuminate\Http\Exceptions\HttpResponseException;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

/**
 * Class {{ class }}
 * @package App\Classes
 */

class {{ class }}
{
    public static function rollback($e, $message = "Failure in the process", $code = 500)
    {
        DB::rollBack();
        Log::info($e);
        self::throw($e, $message, $code);
    }

    public static function throw($e, $message = "Failure in the process", $code = 500)
    {
        Log::info($e);
        throw new HttpResponseException(response()->json([
            "message" => $message,
            'statusCode' => $code,
            'success' => false,
            'data' => []
        ], $code));
    }

    public static function failed($message = "Failure in the validation", $code = 422, $error = [])
    {
        Log::info($error);
        throw new HttpResponseException(response()->json([
            "message" => $message,
            'statusCode' => $code,
            'success' => false,
            'data' => $error
        ], $code));
    }

    public static function sendResponse($result, $message = '', $code = 200, $token = '')
    {
        if($code === 204){
            return response()->noContent();
        }

        if(!empty($token)){
            $response = [
                'message' => $message,
                'statusCode' => $code,
                'success' => true,
                'data' => $result,
                'authorization' => [
                    'token' => $token,
                    'type' => 'bearer',
                ]
            ];
        }else{
            $response = [
                'message' => $message,
                'statusCode' => $code,
                'success' => true,
                'data' => $result
            ];
        }
        return response()->json($response, $code);
    }
}
